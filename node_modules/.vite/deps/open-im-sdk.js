import "./chunk-HUBM7RA2.js";

// node_modules/open-im-sdk/index.esm.js
var e;
var n;
var r = function() {
  function e2() {
    this.events = void 0, this.events = {};
  }
  var n2 = e2.prototype;
  return n2.emit = function(e3, n3) {
    return this.events[e3] && this.events[e3].forEach(function(e4) {
      return e4(n3);
    }), this;
  }, n2.on = function(e3, n3) {
    return this.events[e3] ? this.events[e3].push(n3) : this.events[e3] = [n3], this;
  }, n2.off = function(e3, n3) {
    if (e3 && "function" == typeof n3) {
      var r2 = this.events[e3], t2 = r2.findIndex(function(e4) {
        return e4 === n3;
      });
      r2.splice(t2, 1);
    } else
      this.events[e3] = [];
    return this;
  }, e2;
}();
function t() {
  return t = Object.assign || function(e2) {
    for (var n2 = 1; n2 < arguments.length; n2++) {
      var r2 = arguments[n2];
      for (var t2 in r2)
        Object.prototype.hasOwnProperty.call(r2, t2) && (e2[t2] = r2[t2]);
    }
    return e2;
  }, t.apply(this, arguments);
}
function i(e2, n2) {
  return i = Object.setPrototypeOf || function(e3, n3) {
    return e3.__proto__ = n3, e3;
  }, i(e2, n2);
}
!function(e2) {
  e2.INITSDK = "InitSDK", e2.LOGIN = "Login", e2.LOGOUT = "Logout", e2.GETLOGINSTATUS = "GetLoginStatus", e2.GETLOGINUSER = "GetLoginUser", e2.GETSELFUSERINFO = "GetSelfUserInfo", e2.CREATETEXTMESSAGE = "CreateTextMessage", e2.CREATETEXTATMESSAGE = "CreateTextAtMessage", e2.CREATEADVANCEDTEXTMESSAGE = "CreateAdvancedTextMessage", e2.CREATEIMAGEMESSAGEFROMBYURL = "CreateImageMessageByURL", e2.CREATESOUNDMESSAGEBYURL = "CreateSoundMessageByURL", e2.CREATEVIDEOMESSAGEBYURL = "CreateVideoMessageByURL", e2.CREATEFILEMESSAGEBYURL = "CreateFileMessageByURL", e2.CREATEIMAGEMESSAGEFROMFULLPATH = "CreateImageMessageFromFullPath", e2.CREATESOUNDMESSAGEFROMFULLPATH = "CreateSoundMessageFromFullPath", e2.CREATEVIDEOMESSAGEFROMFULLPATH = "CreateVideoMessageFromFullPath", e2.CREATEFILEMESSAGEFROMFULLPATH = "CreateFileMessageFromFullPath", e2.CREATELOCATIONMESSAGE = "CreateLocationMessage", e2.CREATECUSTOMMESSAGE = "CreateCustomMessage", e2.CREATEMERGERMESSAGE = "CreateMergerMessage", e2.CREATEFORWARDMESSAGE = "CreateForwardMessage", e2.CREATEQUOTEMESSAGE = "CreateQuoteMessage", e2.CREATEADVANCEDQUOTEMESSAGE = "CreateAdvancedQuoteMessage", e2.CREATECARDMESSAGE = "CreateCardMessage", e2.CREATEFACEMESSAGE = "CreateFaceMessage", e2.SENDMESSAGE = "SendMessage", e2.SENDMESSAGENOTOSS = "SendMessageNotOss", e2.GETHISTORYMESSAGELIST = "GetHistoryMessageList", e2.GETADVANCEDHISTORYMESSAGELIST = "GetAdvancedHistoryMessageList", e2.GETHISTORYMESSAGELISTREVERSE = "GetHistoryMessageListReverse", e2.REVOKEMESSAGE = "RevokeMessage", e2.SETONECONVERSATIONPRIVATECHAT = "SetOneConversationPrivateChat", e2.DELETEMESSAGEFROMLOCALSTORAGE = "DeleteMessageFromLocalStorage", e2.DELETEMESSAGEFROMLOCALANDSVR = "DeleteMessageFromLocalAndSvr", e2.DELETECONVERSATIONFROMLOCALANDSVR = "DeleteConversationFromLocalAndSvr", e2.DELETEALLCONVERSATIONFROMLOCAL = "DeleteAllConversationFromLocal", e2.DELETEALLMSGFROMLOCALANDSVR = "DeleteAllMsgFromLocalAndSvr", e2.DELETEALLMSGFROMLOCAL = "DeleteAllMsgFromLocal", e2.MARKSINGLEMESSAGEHASREAD = "MarkSingleMessageHasRead", e2.INSERTSINGLEMESSAGETOLOCALSTORAGE = "InsertSingleMessageToLocalStorage", e2.INSERTGROUPMESSAGETOLOCALSTORAGE = "InsertGroupMessageToLocalStorage", e2.TYPINGSTATUSUPDATE = "TypingStatusUpdate", e2.MARKC2CMESSAGEASREAD = "MarkC2CMessageAsRead", e2.MARKMESSAGEASREADBYCONID = "MarkMessageAsReadByConID", e2.CLEARC2CHISTORYMESSAGE = "ClearC2CHistoryMessage", e2.CLEARC2CHISTORYMESSAGEFROMLOCALANDSVR = "ClearC2CHistoryMessageFromLocalAndSvr", e2.CLEARGROUPHISTORYMESSAGE = "ClearGroupHistoryMessage", e2.CLEARGROUPHISTORYMESSAGEFROMLOCALANDSVR = "ClearGroupHistoryMessageFromLocalAndSvr", e2.ADDFRIEND = "AddFriend", e2.SEARCHFRIENDS = "SearchFriends", e2.GETDESIGNATEDFRIENDSINFO = "GetDesignatedFriendsInfo", e2.GETRECVFRIENDAPPLICATIONLIST = "GetRecvFriendApplicationList", e2.GETSENDFRIENDAPPLICATIONLIST = "GetSendFriendApplicationList", e2.GETFRIENDLIST = "GetFriendList", e2.SETFRIENDREMARK = "SetFriendRemark", e2.ADDBLACK = "AddBlack", e2.GETBLACKLIST = "GetBlackList", e2.REMOVEBLACK = "RemoveBlack", e2.CHECKFRIEND = "CheckFriend", e2.ACCEPTFRIENDAPPLICATION = "AcceptFriendApplication", e2.REFUSEFRIENDAPPLICATION = "RefuseFriendApplication", e2.DELETEFRIEND = "DeleteFriend", e2.GETUSERSINFO = "GetUsersInfo", e2.SETSELFINFO = "SetSelfInfo", e2.GETALLCONVERSATIONLIST = "GetAllConversationList", e2.GETCONVERSATIONLISTSPLIT = "GetConversationListSplit", e2.GETONECONVERSATION = "GetOneConversation", e2.GETCONVERSATIONIDBYSESSIONTYPE = "GetConversationIDBySessionType", e2.GETMULTIPLECONVERSATION = "GetMultipleConversation", e2.DELETECONVERSATION = "DeleteConversation", e2.SETCONVERSATIONDRAFT = "SetConversationDraft", e2.PINCONVERSATION = "PinConversation", e2.GETTOTALUNREADMSGCOUNT = "GetTotalUnreadMsgCount", e2.GETCONVERSATIONRECVMESSAGEOPT = "GetConversationRecvMessageOpt", e2.SETCONVERSATIONRECVMESSAGEOPT = "SetConversationRecvMessageOpt", e2.SEARCHLOCALMESSAGES = "SearchLocalMessages", e2.MARKGROUPMESSAGEHASREAD = "MarkGroupMessageHasRead", e2.MARKGROUPMESSAGEASREAD = "MarkGroupMessageAsRead", e2.INVITEUSERTOGROUP = "InviteUserToGroup", e2.KICKGROUPMEMBER = "KickGroupMember", e2.GETGROUPMEMBERSINFO = "GetGroupMembersInfo", e2.GETGROUPMEMBERLIST = "GetGroupMemberList", e2.GETGROUPMEMBERLISTBYJOINTIMEFILTER = "GetGroupMemberListByJoinTimeFilter", e2.SEARCHGROUPMEMBERS = "SearchGroupMembers", e2.SETGROUPAPPLYMEMBERFRIEND = "SetGroupApplyMemberFriend", e2.SETGROUPLOOKMEMBERINFO = "SetGroupLookMemberInfo", e2.GETJOINEDGROUPLIST = "GetJoinedGroupList", e2.CREATEGROUP = "CreateGroup", e2.SETGROUPINFO = "SetGroupInfo", e2.SETGROUPMEMBERNICKNAME = "SetGroupMemberNickname", e2.GETGROUPSINFO = "GetGroupsInfo", e2.JOINGROUP = "JoinGroup", e2.SEARCHGROUPS = "SearchGroups", e2.QUITGROUP = "QuitGroup", e2.DISMISSGROUP = "DismissGroup", e2.CHANGEGROUPMUTE = "ChangeGroupMute", e2.CHANGEGROUPMEMBERMUTE = "ChangeGroupMemberMute", e2.TRANSFERGROUPOWNER = "TransferGroupOwner", e2.GETSENDGROUPAPPLICATIONLIST = "GetSendGroupApplicationList", e2.GETRECVGROUPAPPLICATIONLIST = "GetRecvGroupApplicationList", e2.ACCEPTGROUPAPPLICATION = "AcceptGroupApplication", e2.REFUSEGROUPAPPLICATION = "RefuseGroupApplication", e2.SIGNAL_INGINVITE = "SignalingInvite", e2.SIGNALINGINVITEINGROUP = "SignalingInviteInGroup", e2.SIGNALINGACCEPT = "SignalingAccept", e2.SIGNALINGREJECT = "SignalingReject", e2.SIGNALINGCANCEL = "SignalingCancel", e2.SIGNALINGHUNGUP = "SignalingHungUp", e2.GETSUBDEPARTMENT = "GetSubDepartment", e2.GETDEPARTMENTMEMBER = "GetDepartmentMember", e2.GETUSERINDEPARTMENT = "GetUserInDepartment", e2.GETDEPARTMENTMEMBERANDSUBDEPARTMENT = "GetDepartmentMemberAndSubDepartment", e2.GETDEPARTMENTINFO = "GetDepartmentInfo", e2.SEARCHORGANIZATION = "SearchOrganization", e2.RESETCONVERSATIONGROUPATTYPE = "ResetConversationGroupAtType", e2.SETGROUPMEMBERROLELEVEL = "SetGroupMemberRoleLevel", e2.SETGROUPVERIFICATION = "SetGroupVerification", e2.SETGLOBALRECVMESSAGEOPT = "SetGlobalRecvMessageOpt", e2.NEWREVOKEMESSAGE = "NewRevokeMessage", e2.FINDMESSAGELIST = "FindMessageList";
}(e || (e = {})), function(e2) {
  e2.ONCONNECTFAILED = "OnConnectFailed", e2.ONCONNECTSUCCESS = "OnConnectSuccess", e2.ONCONNECTING = "OnConnecting", e2.ONKICKEDOFFLINE = "OnKickedOffline", e2.ONSELFINFOUPDATED = "OnSelfInfoUpdated", e2.ONUSERTOKENEXPIRED = "OnUserTokenExpired", e2.ONPROGRESS = "OnProgress", e2.ONRECVNEWMESSAGE = "OnRecvNewMessage", e2.ONRECVNEWMESSAGES = "OnRecvNewMessages", e2.ONRECVMESSAGEREVOKED = "OnRecvMessageRevoked", e2.ONRECVC2CREADRECEIPT = "OnRecvC2CReadReceipt", e2.ONRECVGROUPREADRECEIPT = "OnRecvGroupReadReceipt", e2.ONCONVERSATIONCHANGED = "OnConversationChanged", e2.ONNEWCONVERSATION = "OnNewConversation", e2.ONSYNCSERVERFAILED = "OnSyncServerFailed", e2.ONSYNCSERVERFINISH = "OnSyncServerFinish", e2.ONSYNCSERVERSTART = "OnSyncServerStart", e2.ONTOTALUNREADMESSAGECOUNTCHANGED = "OnTotalUnreadMessageCountChanged", e2.ONBLACKADDED = "OnBlackAdded", e2.ONBLACKDELETED = "OnBlackDeleted", e2.ONFRIENDAPPLICATIONACCEPTED = "OnFriendApplicationAccepted", e2.ONFRIENDAPPLICATIONADDED = "OnFriendApplicationAdded", e2.ONFRIENDAPPLICATIONDELETED = "OnFriendApplicationDeleted", e2.ONFRIENDAPPLICATIONREJECTED = "OnFriendApplicationRejected", e2.ONFRIENDINFOCHANGED = "OnFriendInfoChanged", e2.ONFRIENDADDED = "OnFriendAdded", e2.ONFRIENDDELETED = "OnFriendDeleted", e2.ONJOINEDGROUPADDED = "OnJoinedGroupAdded", e2.ONJOINEDGROUPDELETED = "OnJoinedGroupDeleted", e2.ONGROUPMEMBERADDED = "OnGroupMemberAdded", e2.ONGROUPMEMBERDELETED = "OnGroupMemberDeleted", e2.ONGROUPAPPLICATIONADDED = "OnGroupApplicationAdded", e2.ONGROUPAPPLICATIONDELETED = "OnGroupApplicationDeleted", e2.ONGROUPINFOCHANGED = "OnGroupInfoChanged", e2.ONGROUPMEMBERINFOCHANGED = "OnGroupMemberInfoChanged", e2.ONGROUPAPPLICATIONACCEPTED = "OnGroupApplicationAccepted", e2.ONGROUPAPPLICATIONREJECTED = "OnGroupApplicationRejected", e2.ONRECEIVENEWINVITATION = "OnReceiveNewInvitation", e2.ONINVITEEACCEPTED = "OnInviteeAccepted", e2.ONINVITEEREJECTED = "OnInviteeRejected", e2.ONINVITATIONCANCELLED = "OnInvitationCancelled", e2.ONHANGUP = "OnHangUp", e2.ONINVITATIONTIMEOUT = "OnInvitationTimeout", e2.ONINVITEEACCEPTEDBYOTHERDEVICE = "OnInviteeAcceptedByOtherDevice", e2.ONINVITEEREJECTEDBYOTHERDEVICE = "OnInviteeRejectedByOtherDevice", e2.ONORGANIZATIONUPDATED = "OnOrganizationUpdated", e2.ONRECVNEWMESSAGEFROMOTHERWEB = "OnRecvNewMessageFromOtherWeb", e2.ONNEWRECVMESSAGEREVOKED = "OnNewRecvMessageRevoked";
}(n || (n = {}));
var o;
var a;
var u;
var E;
var s;
var S;
var I;
var d;
var c;
var A;
var N;
var O;
var D = function(e2) {
  try {
    e2 && e2.terminate();
  } catch (e3) {
    console.log(e3);
  }
};
var R = function(e2) {
  return (36 * Math.random()).toString(36).slice(2) + new Date().getTime().toString() + e2;
};
var T = function(r2) {
  var o2, a2;
  function u2() {
    var i2;
    return (i2 = r2.call(this) || this).ws = void 0, i2.uid = void 0, i2.token = void 0, i2.platform = "web", i2.wsUrl = "", i2.lock = false, i2.logoutFlag = false, i2.ws2promise = {}, i2.onceFlag = true, i2.timer = void 0, i2.lastTime = 0, i2.heartbeatCount = 0, i2.heartbeatStartTime = 0, i2.platformID = 0, i2.isBatch = false, i2.worker = null, i2.getLoginStatus = function(n2) {
      return new Promise(function(r3, t2) {
        var o3 = n2 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETLOGINSTATUS, operationID: o3, userID: i2.uid, data: "" }, r3, t2);
      });
    }, i2.getLoginUser = function(n2) {
      return new Promise(function(r3, t2) {
        var o3 = n2 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETLOGINUSER, operationID: o3, userID: i2.uid, data: "" }, r3, t2);
      });
    }, i2.getSelfUserInfo = function(n2) {
      return new Promise(function(r3, t2) {
        var o3 = n2 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETSELFUSERINFO, operationID: o3, userID: i2.uid, data: "" }, r3, t2);
      });
    }, i2.getUsersInfo = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETUSERSINFO, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.setSelfInfo = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.SETSELFINFO, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.createTextMessage = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.CREATETEXTMESSAGE, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.createTextAtMessage = function(n2, r3) {
      return new Promise(function(o3, a3) {
        var u3 = t({}, n2);
        u3.atUserIDList = JSON.stringify(u3.atUserIDList), u3.atUsersInfo = JSON.stringify(u3.atUsersInfo);
        var E3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.CREATETEXTATMESSAGE, operationID: E3, userID: i2.uid, data: u3 }, o3, a3);
      });
    }, i2.createAdvancedTextMessage = function(n2, r3) {
      return new Promise(function(o3, a3) {
        var u3 = t({}, n2);
        u3.messageEntityList = JSON.stringify(u3.messageEntityList);
        var E3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.CREATEADVANCEDTEXTMESSAGE, operationID: E3, userID: i2.uid, data: u3 }, o3, a3);
      });
    }, i2.createImageMessage = function(n2, r3) {
      return new Promise(function(o3, a3) {
        var u3 = r3 || R(i2.uid), E3 = t({}, n2);
        E3.bigPicture = JSON.stringify(E3.bigPicture), E3.snapshotPicture = JSON.stringify(E3.snapshotPicture), E3.sourcePicture = JSON.stringify(E3.sourcePicture);
        var s2 = { reqFuncName: e.CREATEIMAGEMESSAGEFROMBYURL, operationID: u3, userID: i2.uid, data: JSON.stringify(E3) };
        i2.wsSend(s2, o3, a3);
      });
    }, i2.createSoundMessage = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid), u3 = { soundBaseInfo: JSON.stringify(n2) }, E3 = { reqFuncName: e.CREATESOUNDMESSAGEBYURL, operationID: a3, userID: i2.uid, data: JSON.stringify(u3) };
        i2.wsSend(E3, t2, o3);
      });
    }, i2.createVideoMessage = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid), u3 = { videoBaseInfo: JSON.stringify(n2) }, E3 = { reqFuncName: e.CREATEVIDEOMESSAGEBYURL, operationID: a3, userID: i2.uid, data: JSON.stringify(u3) };
        i2.wsSend(E3, t2, o3);
      });
    }, i2.createFileMessage = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid), u3 = { fileBaseInfo: JSON.stringify(n2) }, E3 = { reqFuncName: e.CREATEFILEMESSAGEBYURL, operationID: a3, userID: i2.uid, data: JSON.stringify(u3) };
        i2.wsSend(E3, t2, o3);
      });
    }, i2.createFileMessageFromFullPath = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.CREATEFILEMESSAGEFROMFULLPATH, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.createImageMessageFromFullPath = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.CREATEIMAGEMESSAGEFROMFULLPATH, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.createSoundMessageFromFullPath = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.CREATESOUNDMESSAGEFROMFULLPATH, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.createVideoMessageFromFullPath = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.CREATEVIDEOMESSAGEFROMFULLPATH, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.createMergerMessage = function(n2, r3) {
      return new Promise(function(o3, a3) {
        var u3 = r3 || R(i2.uid), E3 = t({}, n2);
        E3.messageList = JSON.stringify(n2.messageList), E3.summaryList = JSON.stringify(n2.summaryList), i2.wsSend({ reqFuncName: e.CREATEMERGERMESSAGE, operationID: u3, userID: i2.uid, data: E3 }, o3, a3);
      });
    }, i2.createForwardMessage = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.CREATEFORWARDMESSAGE, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.createFaceMessage = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.CREATEFACEMESSAGE, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.createLocationMessage = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.CREATELOCATIONMESSAGE, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.createCustomMessage = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.CREATECUSTOMMESSAGE, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.createQuoteMessage = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.CREATEQUOTEMESSAGE, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.createAdvancedQuoteMessage = function(n2, r3) {
      return new Promise(function(o3, a3) {
        var u3 = r3 || R(i2.uid), E3 = t({}, n2);
        E3.messageEntityList = JSON.stringify(E3.messageEntityList), i2.wsSend({ reqFuncName: e.CREATEADVANCEDQUOTEMESSAGE, operationID: u3, userID: i2.uid, data: E3 }, o3, a3);
      });
    }, i2.createCardMessage = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.CREATECARDMESSAGE, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.sendMessage = function(n2, r3) {
      return new Promise(function(o3, a3) {
        var u3 = r3 || R(i2.uid), E3 = t({}, n2);
        E3.offlinePushInfo = E3.offlinePushInfo ? JSON.stringify(n2.offlinePushInfo) : "", i2.wsSend({ reqFuncName: e.SENDMESSAGE, operationID: u3, userID: i2.uid, data: E3 }, o3, a3);
      });
    }, i2.sendMessageNotOss = function(n2, r3) {
      return new Promise(function(o3, a3) {
        var u3 = r3 || R(i2.uid), E3 = t({}, n2);
        E3.offlinePushInfo = E3.offlinePushInfo ? JSON.stringify(n2.offlinePushInfo) : "", i2.wsSend({ reqFuncName: e.SENDMESSAGENOTOSS, operationID: u3, userID: i2.uid, data: E3 }, o3, a3);
      });
    }, i2.getHistoryMessageList = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETHISTORYMESSAGELIST, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.getAdvancedHistoryMessageList = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETADVANCEDHISTORYMESSAGELIST, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.getHistoryMessageListReverse = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETHISTORYMESSAGELISTREVERSE, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.revokeMessage = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.REVOKEMESSAGE, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.setOneConversationPrivateChat = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.SETONECONVERSATIONPRIVATECHAT, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.deleteMessageFromLocalStorage = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.DELETEMESSAGEFROMLOCALSTORAGE, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.deleteMessageFromLocalAndSvr = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.DELETEMESSAGEFROMLOCALANDSVR, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.deleteConversationFromLocalAndSvr = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.DELETECONVERSATIONFROMLOCALANDSVR, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.deleteAllConversationFromLocal = function(n2) {
      return new Promise(function(r3, t2) {
        var o3 = n2 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.DELETEALLCONVERSATIONFROMLOCAL, operationID: o3, userID: i2.uid, data: "" }, r3, t2);
      });
    }, i2.deleteAllMsgFromLocal = function(n2) {
      return new Promise(function(r3, t2) {
        var o3 = n2 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.DELETEALLMSGFROMLOCAL, operationID: o3, userID: i2.uid, data: "" }, r3, t2);
      });
    }, i2.deleteAllMsgFromLocalAndSvr = function(n2) {
      return new Promise(function(r3, t2) {
        var o3 = n2 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.DELETEALLMSGFROMLOCALANDSVR, operationID: o3, userID: i2.uid, data: "" }, r3, t2);
      });
    }, i2.markGroupMessageHasRead = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.MARKGROUPMESSAGEHASREAD, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.markGroupMessageAsRead = function(n2, r3) {
      return new Promise(function(o3, a3) {
        var u3 = r3 || R(i2.uid), E3 = t({}, n2);
        E3.msgIDList = JSON.stringify(E3.msgIDList), i2.wsSend({ reqFuncName: e.MARKGROUPMESSAGEASREAD, operationID: u3, userID: i2.uid, data: E3 }, o3, a3);
      });
    }, i2.insertSingleMessageToLocalStorage = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.INSERTSINGLEMESSAGETOLOCALSTORAGE, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.insertGroupMessageToLocalStorage = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.INSERTGROUPMESSAGETOLOCALSTORAGE, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.typingStatusUpdate = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.TYPINGSTATUSUPDATE, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.markC2CMessageAsRead = function(n2, r3) {
      return new Promise(function(o3, a3) {
        var u3 = t({}, n2);
        u3.msgIDList = JSON.stringify(u3.msgIDList);
        var E3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.MARKC2CMESSAGEASREAD, operationID: E3, userID: i2.uid, data: u3 }, o3, a3);
      });
    }, i2.markNotifyMessageHasRead = function(e2, n2) {
      i2.markMessageAsReadByConID({ conversationID: e2, msgIDList: [] });
    }, i2.markMessageAsReadByConID = function(n2, r3) {
      return new Promise(function(o3, a3) {
        var u3 = t({}, n2);
        u3.msgIDList = JSON.stringify(u3.msgIDList);
        var E3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.MARKMESSAGEASREADBYCONID, operationID: E3, userID: i2.uid, data: u3 }, o3, a3);
      });
    }, i2.clearC2CHistoryMessage = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.CLEARC2CHISTORYMESSAGE, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.clearC2CHistoryMessageFromLocalAndSvr = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.CLEARC2CHISTORYMESSAGEFROMLOCALANDSVR, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.clearGroupHistoryMessage = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.CLEARGROUPHISTORYMESSAGE, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.clearGroupHistoryMessageFromLocalAndSvr = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.CLEARGROUPHISTORYMESSAGEFROMLOCALANDSVR, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.getAllConversationList = function(n2) {
      return new Promise(function(r3, t2) {
        var o3 = n2 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETALLCONVERSATIONLIST, operationID: o3, userID: i2.uid, data: "" }, r3, t2);
      });
    }, i2.getConversationListSplit = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETCONVERSATIONLISTSPLIT, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.getOneConversation = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETONECONVERSATION, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.getConversationIDBySessionType = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETCONVERSATIONIDBYSESSIONTYPE, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.getMultipleConversation = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETMULTIPLECONVERSATION, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.deleteConversation = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.DELETECONVERSATION, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.setConversationDraft = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.SETCONVERSATIONDRAFT, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.pinConversation = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.PINCONVERSATION, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.getTotalUnreadMsgCount = function(n2) {
      return new Promise(function(r3, t2) {
        var o3 = n2 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETTOTALUNREADMSGCOUNT, operationID: o3, userID: i2.uid, data: "" }, r3, t2);
      });
    }, i2.getConversationRecvMessageOpt = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETCONVERSATIONRECVMESSAGEOPT, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.setConversationRecvMessageOpt = function(n2, r3) {
      return new Promise(function(o3, a3) {
        var u3 = r3 || R(i2.uid), E3 = t({}, n2);
        E3.conversationIDList = JSON.stringify(n2.conversationIDList), i2.wsSend({ reqFuncName: e.SETCONVERSATIONRECVMESSAGEOPT, operationID: u3, userID: i2.uid, data: E3 }, o3, a3);
      });
    }, i2.searchLocalMessages = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.SEARCHLOCALMESSAGES, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.addFriend = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.ADDFRIEND, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.searchFriends = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.SEARCHFRIENDS, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.getDesignatedFriendsInfo = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETDESIGNATEDFRIENDSINFO, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.getRecvFriendApplicationList = function(n2) {
      return new Promise(function(r3, t2) {
        var o3 = n2 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETRECVFRIENDAPPLICATIONLIST, operationID: o3, userID: i2.uid, data: "" }, r3, t2);
      });
    }, i2.getSendFriendApplicationList = function(n2) {
      return new Promise(function(r3, t2) {
        var o3 = n2 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETSENDFRIENDAPPLICATIONLIST, operationID: o3, userID: i2.uid, data: "" }, r3, t2);
      });
    }, i2.getFriendList = function(n2) {
      return new Promise(function(r3, t2) {
        var o3 = n2 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETFRIENDLIST, operationID: o3, userID: i2.uid, data: "" }, r3, t2);
      });
    }, i2.setFriendRemark = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.SETFRIENDREMARK, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.checkFriend = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.CHECKFRIEND, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.acceptFriendApplication = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.ACCEPTFRIENDAPPLICATION, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.refuseFriendApplication = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.REFUSEFRIENDAPPLICATION, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.deleteFriend = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.DELETEFRIEND, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.addBlack = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.ADDBLACK, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.removeBlack = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.REMOVEBLACK, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.getBlackList = function(n2) {
      return new Promise(function(r3, t2) {
        var o3 = n2 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETBLACKLIST, operationID: o3, userID: i2.uid, data: "" }, r3, t2);
      });
    }, i2.inviteUserToGroup = function(n2, r3) {
      return new Promise(function(o3, a3) {
        var u3 = r3 || R(i2.uid), E3 = t({}, n2);
        E3.userIDList = JSON.stringify(E3.userIDList), i2.wsSend({ reqFuncName: e.INVITEUSERTOGROUP, operationID: u3, userID: i2.uid, data: E3 }, o3, a3);
      });
    }, i2.kickGroupMember = function(n2, r3) {
      return new Promise(function(o3, a3) {
        var u3 = r3 || R(i2.uid), E3 = t({}, n2);
        E3.userIDList = JSON.stringify(E3.userIDList), i2.wsSend({ reqFuncName: e.KICKGROUPMEMBER, operationID: u3, userID: i2.uid, data: E3 }, o3, a3);
      });
    }, i2.getGroupMembersInfo = function(n2, r3) {
      return new Promise(function(o3, a3) {
        var u3 = r3 || R(i2.uid), E3 = t({}, n2);
        E3.userIDList = JSON.stringify(E3.userIDList), i2.wsSend({ reqFuncName: e.GETGROUPMEMBERSINFO, operationID: u3, userID: i2.uid, data: E3 }, o3, a3);
      });
    }, i2.getGroupMemberList = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETGROUPMEMBERLIST, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.getGroupMemberListByJoinTimeFilter = function(n2, r3) {
      return new Promise(function(o3, a3) {
        var u3 = r3 || R(i2.uid), E3 = t({}, n2);
        E3.filterUserIDList = JSON.stringify(E3.filterUserIDList), i2.wsSend({ reqFuncName: e.GETGROUPMEMBERLISTBYJOINTIMEFILTER, operationID: u3, userID: i2.uid, data: E3 }, o3, a3);
      });
    }, i2.searchGroupMembers = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid), u3 = { reqFuncName: e.SEARCHGROUPMEMBERS, operationID: a3, userID: i2.uid, data: { searchParam: JSON.stringify(n2) } };
        i2.wsSend(u3, t2, o3);
      });
    }, i2.setGroupApplyMemberFriend = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.SETGROUPAPPLYMEMBERFRIEND, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.setGroupLookMemberInfo = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.SETGROUPLOOKMEMBERINFO, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.getJoinedGroupList = function(n2) {
      return new Promise(function(r3, t2) {
        var o3 = n2 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETJOINEDGROUPLIST, operationID: o3, userID: i2.uid, data: "" }, r3, t2);
      });
    }, i2.createGroup = function(n2, r3) {
      return new Promise(function(o3, a3) {
        var u3 = r3 || R(i2.uid), E3 = t({}, n2);
        E3.groupBaseInfo = JSON.stringify(E3.groupBaseInfo), E3.memberList = JSON.stringify(E3.memberList), i2.wsSend({ reqFuncName: e.CREATEGROUP, operationID: u3, userID: i2.uid, data: E3 }, o3, a3);
      });
    }, i2.setGroupInfo = function(n2, r3) {
      return new Promise(function(o3, a3) {
        var u3 = r3 || R(i2.uid), E3 = t({}, n2);
        E3.groupInfo = JSON.stringify(E3.groupInfo), i2.wsSend({ reqFuncName: e.SETGROUPINFO, operationID: u3, userID: i2.uid, data: E3 }, o3, a3);
      });
    }, i2.setGroupMemberNickname = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.SETGROUPMEMBERNICKNAME, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.getGroupsInfo = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETGROUPSINFO, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.joinGroup = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.JOINGROUP, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.searchGroups = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.SEARCHGROUPS, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.quitGroup = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.QUITGROUP, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.dismissGroup = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.DISMISSGROUP, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.changeGroupMute = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.CHANGEGROUPMUTE, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.changeGroupMemberMute = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.CHANGEGROUPMEMBERMUTE, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.transferGroupOwner = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.TRANSFERGROUPOWNER, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.getSendGroupApplicationList = function(n2) {
      return new Promise(function(r3, t2) {
        var o3 = n2 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETSENDGROUPAPPLICATIONLIST, operationID: o3, userID: i2.uid, data: "" }, r3, t2);
      });
    }, i2.getRecvGroupApplicationList = function(n2) {
      return new Promise(function(r3, t2) {
        var o3 = n2 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETRECVGROUPAPPLICATIONLIST, operationID: o3, userID: i2.uid, data: "" }, r3, t2);
      });
    }, i2.acceptGroupApplication = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.ACCEPTGROUPAPPLICATION, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.refuseGroupApplication = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.REFUSEGROUPAPPLICATION, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.signalingInvite = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid), u3 = {};
        u3.invitation = n2, i2.wsSend({ reqFuncName: e.SIGNAL_INGINVITE, operationID: a3, userID: i2.uid, data: u3 }, t2, o3);
      });
    }, i2.signalingInviteInGroup = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid), u3 = {};
        u3.invitation = n2, i2.wsSend({ reqFuncName: e.SIGNALINGINVITEINGROUP, operationID: a3, userID: i2.uid, data: u3 }, t2, o3);
      });
    }, i2.signalingAccept = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.SIGNALINGACCEPT, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.signalingReject = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.SIGNALINGREJECT, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.signalingCancel = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.SIGNALINGCANCEL, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.signalingHungUp = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.SIGNALINGHUNGUP, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.getSubDepartment = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETSUBDEPARTMENT, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.getDepartmentMember = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETDEPARTMENTMEMBER, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.getUserInDepartment = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETUSERINDEPARTMENT, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.getDepartmentMemberAndSubDepartment = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETDEPARTMENTMEMBERANDSUBDEPARTMENT, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.getDepartmentInfo = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.GETDEPARTMENTINFO, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.searchOrganization = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid), u3 = n2;
        u3.input = JSON.stringify(u3.input), i2.wsSend({ reqFuncName: e.SEARCHORGANIZATION, operationID: a3, userID: i2.uid, data: u3 }, t2, o3);
      });
    }, i2.resetConversationGroupAtType = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.RESETCONVERSATIONGROUPATTYPE, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.setGroupMemberRoleLevel = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.SETGROUPMEMBERROLELEVEL, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.setGroupVerification = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.SETGROUPVERIFICATION, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.setGlobalRecvMessageOpt = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.SETGLOBALRECVMESSAGEOPT, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.newRevokeMessage = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.NEWREVOKEMESSAGE, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.findMessageList = function(n2, r3) {
      return new Promise(function(t2, o3) {
        var a3 = r3 || R(i2.uid);
        i2.wsSend({ reqFuncName: e.FINDMESSAGELIST, operationID: a3, userID: i2.uid, data: n2 }, t2, o3);
      });
    }, i2.wsSend = function(r3, t2, o3) {
      var a3, u3, E3;
      if (null == (a3 = window) || !a3.navigator || window.navigator.onLine)
        if ((null == (u3 = i2.ws) ? void 0 : u3.readyState) === (null == (E3 = i2.ws) ? void 0 : E3.OPEN)) {
          "object" == typeof r3.data && (r3.data = JSON.stringify(r3.data));
          var s2 = { oid: r3.operationID || R(i2.uid), mname: r3.reqFuncName, mrsve: t2, mrjet: o3, flag: false };
          i2.ws2promise[s2.oid] = s2;
          var S2 = function(r4) {
            i2.lastTime = new Date().getTime();
            var t3 = JSON.parse(r4.data);
            if (n[t3.event.toUpperCase()])
              i2.emit(t3.event, t3);
            else {
              t3.event === e.LOGOUT && i2.ws2promise[t3.operationID] && (i2.logoutFlag = true, i2.ws.close(), i2.ws = void 0);
              var o4 = i2.ws2promise[t3.operationID];
              o4 ? (0 === t3.errCode ? o4.mrsve(t3) : o4.mrjet(t3), delete i2.ws2promise[t3.operationID]) : t3.event !== e.SENDMESSAGE && t3.event !== e.SENDMESSAGENOTOSS || i2.emit(n.ONRECVNEWMESSAGEFROMOTHERWEB, t3);
            }
          };
          try {
            "web" == i2.platform ? (i2.ws.send(JSON.stringify(r3)), i2.ws.onmessage = S2) : (i2.ws.send({ data: JSON.stringify(r3), success: function(e2) {
              "uni" === i2.platform && void 0 !== i2.ws._callbacks && void 0 !== i2.ws._callbacks.message && (i2.ws._callbacks.message = []);
            } }), i2.onceFlag && (i2.ws.onMessage(S2), i2.onceFlag = false));
          } catch (e2) {
            return void o3({ event: r3.reqFuncName, errCode: 112, errMsg: "no ws conect...", data: "", operationID: r3.operationID || "" });
          }
          r3.reqFuncName === e.LOGOUT && (i2.onceFlag = true);
        } else
          o3({ event: r3.reqFuncName, errCode: 112, errMsg: "ws conecting...", data: "", operationID: r3.operationID || "" });
      else
        o3({ event: r3.reqFuncName, errCode: 113, errMsg: "net work error", data: "", operationID: r3.operationID || "" });
    }, i2.getPlatform(), i2;
  }
  a2 = r2, (o2 = u2).prototype = Object.create(a2.prototype), o2.prototype.constructor = o2, i(o2, a2);
  var E2 = u2.prototype;
  return E2.login = function(n2) {
    var r3 = this;
    return new Promise(function(t2, i2) {
      var o3 = n2.userID, a3 = n2.token, u3 = n2.platformID, E3 = n2.isBatch, s2 = void 0 !== E3 && E3, S2 = n2.operationID;
      r3.wsUrl = n2.url + "?sendID=" + o3 + "&token=" + a3 + "&platformID=" + u3, r3.platformID = u3;
      var I2 = { userID: o3, token: a3 }, d2 = { event: e.LOGIN, errCode: 0, errMsg: "", data: "", operationID: S2 || "" };
      r3.createWs(function() {
        r3.uid = o3, r3.token = a3, r3.isBatch = s2, r3.iLogin(I2, S2).then(function(e2) {
          r3.logoutFlag = false, r3.heartbeat(), t2(e2);
        }).catch(function(e2) {
          d2.errCode = e2.errCode, d2.errMsg = e2.errMsg, i2(d2);
        });
      }, function() {
        d2.errCode = 111, d2.errMsg = "ws connect close...", r3.logoutFlag || Object.values(r3.ws2promise).forEach(function(e2) {
          return e2.mrjet({ event: e2.mname, errCode: 111, errMsg: "ws connect close...", data: "", operationID: e2.oid });
        }), i2(d2);
      }, function(e2) {
        console.log(e2), d2.errCode = 112, d2.errMsg = "ws connect error...", i2(d2);
      }), r3.ws || (d2.errCode = 112, d2.errMsg = "The current platform is not supported...", i2(d2));
    });
  }, E2.iLogin = function(n2, r3) {
    var t2 = this;
    return new Promise(function(i2, o3) {
      var a3 = r3 || R(t2.uid);
      t2.wsSend({ reqFuncName: e.LOGIN, operationID: a3, userID: t2.uid, data: n2, batchMsg: t2.isBatch ? 1 : 0 }, i2, o3);
    });
  }, E2.logout = function(n2) {
    var r3 = this;
    return new Promise(function(t2, i2) {
      var o3 = n2 || R(r3.uid);
      r3.wsSend({ reqFuncName: e.LOGOUT, operationID: o3, userID: r3.uid, data: "" }, t2, i2);
    });
  }, E2.getPlatform = function() {
    var e2 = typeof WebSocket, n2 = typeof uni, r3 = typeof wx;
    "undefined" === e2 ? ("object" === r3 && (this.platform = "wx"), "object" === n2 && (this.platform = "uni"), this.platform = "unknow") : this.platform = "web";
  }, E2.createWs = function(e2, n2, r3) {
    var t2 = this;
    return console.log("start createWs..."), new Promise(function(i2, o3) {
      var a3;
      null == (a3 = t2.ws) || a3.close(), t2.ws = void 0;
      var u3 = function() {
        t2.iLogin({ userID: t2.uid, token: t2.token }).then(function(e3) {
          t2.logoutFlag = false, console.log("iLogin suc..."), t2.heartbeat(), i2();
        });
      };
      e2 && (u3 = e2);
      var E3 = function() {
        console.log("ws close agin:::"), t2.logoutFlag || Object.values(t2.ws2promise).forEach(function(e3) {
          return e3.mrjet({ event: e3.mname, errCode: 111, errMsg: "ws connect close...", data: "", operationID: e3.oid });
        });
      };
      n2 && (E3 = n2);
      var s2 = function() {
      };
      if (r3 && (s2 = r3), "web" === t2.platform)
        return t2.ws = new WebSocket(t2.wsUrl), t2.ws.onclose = E3, t2.ws.onopen = u3, void (t2.ws.onerror = s2);
      var S2 = "uni" === t2.platform ? uni : wx;
      t2.ws = S2.connectSocket({ url: t2.wsUrl, complete: function() {
      } }), t2.ws.onClose(E3), t2.ws.onOpen(u3), t2.ws.onError(s2);
    });
  }, E2.reconnect = function() {
    var e2 = this;
    this.onceFlag || (this.onceFlag = true), this.lock || (this.lock = true, this.clearTimer(), this.timer = setTimeout(function() {
      e2.createWs(), e2.lock = false;
    }, 500));
  }, E2.clearTimer = function() {
    this.timer && clearTimeout(this.timer);
  }, E2.heartbeat = function() {
    var e2, n2, r3, t2, i2 = this;
    console.log("start heartbeat..."), this.clearTimer(), this.worker && D(this.worker);
    try {
      this.worker = (e2 = function() {
        var e3, n3, r4, t3;
        i2.logoutFlag ? i2.worker && D(i2.worker) : (null == (e3 = i2.ws) ? void 0 : e3.readyState) === (null == (n3 = i2.ws) ? void 0 : n3.CONNECTING) || (null == (r4 = i2.ws) ? void 0 : r4.readyState) === (null == (t3 = i2.ws) ? void 0 : t3.OPEN) ? new Date().getTime() - i2.lastTime < 9e3 || i2.getLoginStatus().catch(function(e4) {
          return i2.reconnect();
        }) : i2.reconnect();
      }, n2 = new Blob(["(function (e) {\n      setInterval(function () {\n        this.postMessage(null)\n      }, 10000)\n    })()"]), r3 = window.URL.createObjectURL(n2), (t2 = new Worker(r3)).onmessage = e2, t2);
    } catch (e3) {
    }
  }, u2;
}(r);
!function(e2) {
  e2[e2.Nomal = 0] = "Nomal", e2[e2.Mute = 1] = "Mute", e2[e2.WithoutNotify = 2] = "WithoutNotify";
}(o || (o = {})), function(e2) {
  e2[e2.Allowed = 0] = "Allowed", e2[e2.NotAllowed = 1] = "NotAllowed";
}(a || (a = {})), function(e2) {
  e2[e2.NomalGroup = 0] = "NomalGroup", e2[e2.SuperGroup = 1] = "SuperGroup", e2[e2.WorkingGroup = 2] = "WorkingGroup";
}(u || (u = {})), function(e2) {
  e2[e2.ApplyNeedInviteNot = 0] = "ApplyNeedInviteNot", e2[e2.AllNeed = 1] = "AllNeed", e2[e2.AllNot = 2] = "AllNot";
}(E || (E = {})), function(e2) {
  e2[e2.Nomal = 0] = "Nomal", e2[e2.Baned = 1] = "Baned", e2[e2.Dismissed = 2] = "Dismissed", e2[e2.Muted = 3] = "Muted";
}(s || (s = {})), function(e2) {
  e2[e2.Invitation = 2] = "Invitation", e2[e2.Search = 3] = "Search", e2[e2.QrCode = 4] = "QrCode";
}(S || (S = {})), function(e2) {
  e2[e2.Nomal = 1] = "Nomal", e2[e2.Owner = 2] = "Owner", e2[e2.Admin = 3] = "Admin";
}(I || (I = {})), function(e2) {
  e2[e2.AtNormal = 0] = "AtNormal", e2[e2.AtMe = 1] = "AtMe", e2[e2.AtAll = 2] = "AtAll", e2[e2.AtAllAtMe = 3] = "AtAllAtMe", e2[e2.AtGroupNotice = 4] = "AtGroupNotice";
}(d || (d = {})), function(e2) {
  e2[e2.Sending = 1] = "Sending", e2[e2.Succeed = 2] = "Succeed", e2[e2.Failed = 3] = "Failed";
}(c || (c = {})), function(e2) {
  e2[e2.iOS = 1] = "iOS", e2[e2.Android = 2] = "Android", e2[e2.Windows = 3] = "Windows", e2[e2.MacOSX = 4] = "MacOSX", e2[e2.Web = 5] = "Web", e2[e2.Linux = 7] = "Linux", e2[e2.Admin = 8] = "Admin";
}(A || (A = {})), function(e2) {
  e2[e2.TEXTMESSAGE = 101] = "TEXTMESSAGE", e2[e2.PICTUREMESSAGE = 102] = "PICTUREMESSAGE", e2[e2.VOICEMESSAGE = 103] = "VOICEMESSAGE", e2[e2.VIDEOMESSAGE = 104] = "VIDEOMESSAGE", e2[e2.FILEMESSAGE = 105] = "FILEMESSAGE", e2[e2.ATTEXTMESSAGE = 106] = "ATTEXTMESSAGE", e2[e2.MERGERMESSAGE = 107] = "MERGERMESSAGE", e2[e2.CARDMESSAGE = 108] = "CARDMESSAGE", e2[e2.LOCATIONMESSAGE = 109] = "LOCATIONMESSAGE", e2[e2.CUSTOMMESSAGE = 110] = "CUSTOMMESSAGE", e2[e2.REVOKEMESSAGE = 111] = "REVOKEMESSAGE", e2[e2.HASREADRECEIPTMESSAGE = 112] = "HASREADRECEIPTMESSAGE", e2[e2.TYPINGMESSAGE = 113] = "TYPINGMESSAGE", e2[e2.QUOTEMESSAGE = 114] = "QUOTEMESSAGE", e2[e2.FACEMESSAGE = 115] = "FACEMESSAGE", e2[e2.ADVANCETEXTMESSAGE = 117] = "ADVANCETEXTMESSAGE", e2[e2.ADVANCEREVOKEMESSAGE = 118] = "ADVANCEREVOKEMESSAGE", e2[e2.CUSTOMMSGNOTTRIGGERCONVERSATION = 119] = "CUSTOMMSGNOTTRIGGERCONVERSATION", e2[e2.CUSTOMMSGONLINEONLY = 120] = "CUSTOMMSGONLINEONLY", e2[e2.FRIENDAPPLICATIONAPPROVED = 1201] = "FRIENDAPPLICATIONAPPROVED", e2[e2.FRIENDAPPLICATIONREJECTED = 1202] = "FRIENDAPPLICATIONREJECTED", e2[e2.FRIENDAPPLICATIONADDED = 1203] = "FRIENDAPPLICATIONADDED", e2[e2.FRIENDADDED = 1204] = "FRIENDADDED", e2[e2.FRIENDDELETED = 1205] = "FRIENDDELETED", e2[e2.FRIENDREMARKSET = 1206] = "FRIENDREMARKSET", e2[e2.BLACKADDED = 1207] = "BLACKADDED", e2[e2.BLACKDELETED = 1208] = "BLACKDELETED", e2[e2.SELFINFOUPDATED = 1303] = "SELFINFOUPDATED", e2[e2.NOTIFICATION = 1400] = "NOTIFICATION", e2[e2.GROUPCREATED = 1501] = "GROUPCREATED", e2[e2.GROUPINFOUPDATED = 1502] = "GROUPINFOUPDATED", e2[e2.JOINGROUPAPPLICATIONADDED = 1503] = "JOINGROUPAPPLICATIONADDED", e2[e2.MEMBERQUIT = 1504] = "MEMBERQUIT", e2[e2.GROUPAPPLICATIONACCEPTED = 1505] = "GROUPAPPLICATIONACCEPTED", e2[e2.GROUPAPPLICATIONREJECTED = 1506] = "GROUPAPPLICATIONREJECTED", e2[e2.GROUPOWNERTRANSFERRED = 1507] = "GROUPOWNERTRANSFERRED", e2[e2.MEMBERKICKED = 1508] = "MEMBERKICKED", e2[e2.MEMBERINVITED = 1509] = "MEMBERINVITED", e2[e2.MEMBERENTER = 1510] = "MEMBERENTER", e2[e2.GROUPDISMISSED = 1511] = "GROUPDISMISSED", e2[e2.GROUPMEMBERMUTED = 1512] = "GROUPMEMBERMUTED", e2[e2.GROUPMEMBERCANCELMUTED = 1513] = "GROUPMEMBERCANCELMUTED", e2[e2.GROUPMUTED = 1514] = "GROUPMUTED", e2[e2.GROUPCANCELMUTED = 1515] = "GROUPCANCELMUTED", e2[e2.GROUPMEMBERINFOUPDATED = 1516] = "GROUPMEMBERINFOUPDATED", e2[e2.BURNMESSAGECHANGE = 1701] = "BURNMESSAGECHANGE";
}(N || (N = {})), function(e2) {
  e2[e2.Single = 1] = "Single", e2[e2.Group = 2] = "Group", e2[e2.SuperGroup = 3] = "SuperGroup", e2[e2.Notification = 4] = "Notification";
}(O || (O = {}));
export {
  a as AllowType,
  n as CbEvents,
  d as GroupAtType,
  S as GroupJoinSource,
  I as GroupRole,
  s as GroupStatus,
  u as GroupType,
  E as GroupVerificationType,
  c as MessageStatus,
  N as MessageType,
  T as OpenIMSDK,
  o as OptType,
  A as Platform,
  e as RequestFunc,
  O as SessionType,
  r as emitter,
  R as uuid
};
//# sourceMappingURL=open-im-sdk.js.map
